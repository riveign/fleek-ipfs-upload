import { Deployment, Site } from '../../generated/sitesClient/schema';
import { AuthenticatedClient, AuthenticatedClientOptions } from '../libs/AuthenticatedClient';
type SitesClientOptions = AuthenticatedClientOptions & {
    sitesServiceApiUrl: string;
};
export type GetSiteArgs = Pick<Site, 'id'>;
export type GetBySlugArgs = Pick<Site, 'slug'>;
export type CreateSiteArgs = Pick<Site, 'name'>;
export type DeleteSiteArgs = Pick<Site, 'id'>;
export type CreateCustomIpfsDeploymentArgs = Pick<Deployment, 'siteId' | 'cid'>;
export type GetDeploymentArgs = Pick<Deployment, 'id'>;
export declare class SitesClient extends AuthenticatedClient {
    private client?;
    private sitesServiceApiUrl;
    private static SITE_MAPPED_PROPERTIES;
    private static DEPLOYMENT_MAPPED_PROPERTIES;
    private getClient;
    constructor(options: SitesClientOptions);
    get: ({ id }: GetSiteArgs) => Promise<Site>;
    getBySlug: ({ slug }: GetBySlugArgs) => Promise<Site>;
    list: () => Promise<Site[]>;
    create: ({ name }: CreateSiteArgs) => Promise<Site>;
    delete: ({ id }: DeleteSiteArgs) => Promise<Site>;
    createCustomIpfsDeployment: ({ siteId, cid }: CreateCustomIpfsDeploymentArgs) => Promise<Deployment>;
    getDeployment: ({ id }: GetDeploymentArgs) => Promise<Deployment>;
}
export {};
//# sourceMappingURL=sites.d.ts.map