import { AuthenticatedClient, AuthenticatedClientOptions } from '../libs/AuthenticatedClient';
type DomainsClientOptions = AuthenticatedClientOptions & {
    domainsServiceApiUrl: string;
};
export declare class DomainsClient extends AuthenticatedClient {
    private client?;
    private domainsServiceApiUrl;
    private static DOMAIN_MAPPED_PROPERTIES;
    private static ZONE_MAPPED_PROPERTIES;
    private getClient;
    constructor(options: DomainsClientOptions);
    list: () => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">[]>;
    get: ({ domainId }: {
        domainId: string;
    }) => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">>;
    getByHostname: ({ hostname }: {
        hostname: string;
    }) => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">>;
    listByZoneId: ({ zoneId }: {
        zoneId: string;
    }) => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">[]>;
    createDomain: ({ zoneId, hostname }: {
        zoneId: string;
        hostname: string;
    }) => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">>;
    deleteDomain: ({ domainId }: {
        domainId: string;
    }) => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">>;
    verifyDomain: ({ domainId }: {
        domainId: string;
    }) => Promise<Pick<{
        createdAt: string;
        dnsConfigs: Pick<{
            createdAt: string;
            id: string;
            name: string;
            type: import("../domainsClient/schema").DnsConfigType;
            updatedAt: string;
            value: string;
            __typename: "DnsConfig";
        }, "createdAt" | "id" | "name" | "type" | "updatedAt" | "value" | "__typename">[];
        hostname: string;
        id: string;
        isVerified: import("@genql/runtime").FieldsSelection<boolean, number | boolean | undefined>;
        projectId: string;
        status: import("@genql/runtime").FieldsSelection<import("../domainsClient/schema").DomainStatus, number | boolean | undefined>;
        updatedAt: string;
        zoneId: string;
        __typename: "Domain";
    }, "createdAt" | "id" | "updatedAt" | "dnsConfigs" | "hostname" | "isVerified" | "projectId" | "status" | "zoneId" | "__typename">>;
    listZones: () => Promise<Pick<{
        createdAt: string;
        id: string;
        originUrl?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedAt?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedBy?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        projectId: string;
        updatedAt: string;
        __typename: "Zone";
    }, "createdAt" | "id" | "updatedAt" | "projectId" | "originUrl" | "originUrlChangedAt" | "originUrlChangedBy" | "__typename" | undefined>[]>;
    getZone: ({ id }: {
        id: string;
    }) => Promise<Pick<{
        createdAt: string;
        id: string;
        originUrl?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedAt?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedBy?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        projectId: string;
        updatedAt: string;
        __typename: "Zone";
    }, "createdAt" | "id" | "updatedAt" | "projectId" | "originUrl" | "originUrlChangedAt" | "originUrlChangedBy" | "__typename" | undefined>>;
    createZoneForSite: ({ siteId }: {
        siteId: string;
    }) => Promise<Pick<{
        createdAt: string;
        id: string;
        originUrl?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedAt?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedBy?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        projectId: string;
        updatedAt: string;
        __typename: "Zone";
    }, "createdAt" | "id" | "updatedAt" | "projectId" | "originUrl" | "originUrlChangedAt" | "originUrlChangedBy" | "__typename" | undefined>>;
}
export {};
//# sourceMappingURL=domains.d.ts.map