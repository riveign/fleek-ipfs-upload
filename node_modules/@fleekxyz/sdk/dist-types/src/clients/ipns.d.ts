import { AuthenticatedClient, AuthenticatedClientOptions } from '../libs/AuthenticatedClient';
type IpnsClientOptions = AuthenticatedClientOptions & {
    ipnsServiceApiUrl: string;
};
export type PublishRecord = {
    id: string;
    hash: string;
};
export type ResolveName = {
    name: string;
};
export type DeleteRecordArgs = {
    id: string;
};
export type GetRecordArgs = {
    name: string;
};
export type PublishSignedNameArgs = {
    input: string;
    key: string;
};
export declare class IpnsClient extends AuthenticatedClient {
    private client?;
    private ipnsServiceApiUrl;
    private getClient;
    constructor(options: IpnsClientOptions);
    publishSignedName: ({ key, input }: PublishSignedNameArgs) => Promise<string>;
    resolveName: ({ name }: ResolveName) => Promise<string>;
    publishRecord: ({ hash, id }: PublishRecord) => Promise<Pick<{
        hash?: string | undefined;
        id: string;
        name: string;
        __typename: "Record";
    }, "id" | "name" | "hash">>;
    createRecord: () => Promise<Pick<{
        hash?: string | undefined;
        id: string;
        name: string;
        __typename: "Record";
    }, "id" | "name" | "hash">>;
    deleteRecord: ({ id }: DeleteRecordArgs) => Promise<Pick<{
        hash?: string | undefined;
        id: string;
        name: string;
        __typename: "Record";
    }, "id" | "name" | "hash">>;
    listRecords: () => Promise<Pick<{
        hash?: string | undefined;
        id: string;
        name: string;
        __typename: "Record";
    }, "id" | "name" | "hash">[]>;
    getRecord: ({ name }: GetRecordArgs) => Promise<Pick<{
        hash?: string | undefined;
        id: string;
        name: string;
        __typename: "Record";
    }, "id" | "name" | "hash">>;
}
export {};
//# sourceMappingURL=ipns.d.ts.map