/// <reference types="node" />
import { CID, globSource } from 'ipfs-http-client';
import { AuthenticatedClient, AuthenticatedClientOptions } from '../libs/AuthenticatedClient';
export type IpfsFile = {
    path: string;
    content?: Buffer;
};
export type IpfsClientOptions = AuthenticatedClientOptions & {
    ipfsStorageApiUrl: string;
};
export type AddAllOptions = {
    wrapWithDirectory?: boolean;
};
export type AddFromPathOptions = {
    wrapWithDirectory?: boolean;
};
export type UploadResult = {
    cid: CID;
    size: number;
    path: string;
};
export declare class IpfsClient extends AuthenticatedClient {
    private client?;
    private ipfsStorageApiUrl;
    private getClient;
    constructor(options: IpfsClientOptions);
    add: (file: IpfsFile) => Promise<UploadResult>;
    addAll: (files: Array<IpfsFile> | ReturnType<typeof globSource>, options?: AddAllOptions) => Promise<UploadResult[]>;
    addFromPath: (path: string, options?: AddFromPathOptions) => Promise<UploadResult[]>;
}
//# sourceMappingURL=ipfs.d.ts.map