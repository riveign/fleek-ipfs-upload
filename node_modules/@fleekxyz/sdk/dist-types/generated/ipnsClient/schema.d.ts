import { FieldsSelection, Observable } from '@genql/runtime';
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
};
export interface Mutation {
    /** Creates IPNS record for the given project ID. */
    createRecord: Record;
    deleteRecord: Record;
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishRecord: Record;
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedName: Scalars['String'];
    __typename: 'Mutation';
}
export interface Query {
    /** Get IPNS record for the current project. */
    record: Record;
    records: Record[];
    /** Resolves IPNS name to the IPFS hash. */
    resolveName: Scalars['String'];
    __typename: 'Query';
}
export interface Record {
    hash?: Scalars['String'];
    id: Scalars['ID'];
    name: Scalars['String'];
    __typename: 'Record';
}
export interface MutationRequest {
    /** Creates IPNS record for the given project ID. */
    createRecord?: RecordRequest;
    deleteRecord?: [{
        id: Scalars['ID'];
    }, RecordRequest];
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishRecord?: [
        {
            /** The IPFS SHA-256 hash represented in base32. */
            hash: Scalars['String'];
            /** The managed record ID to publish. */
            id: Scalars['ID'];
        },
        RecordRequest
    ];
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedName?: [
        {
            /** The signed IPNS record represented as base64 string. */
            input: Scalars['String'];
            /** A string representation of a public key, which is the "name" that can be resolved to a record. */
            key: Scalars['String'];
        }
    ];
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface QueryRequest {
    /** Get IPNS record for the current project. */
    record?: [
        {
            /** IPNS record name */
            name: Scalars['String'];
        },
        RecordRequest
    ];
    records?: RecordRequest;
    /** Resolves IPNS name to the IPFS hash. */
    resolveName?: [
        {
            /** The IPNS name to resolve. */
            name: Scalars['String'];
        }
    ];
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface RecordRequest {
    hash?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export declare const isMutation: (obj?: {
    __typename?: any;
} | null) => obj is Mutation;
export declare const isQuery: (obj?: {
    __typename?: any;
} | null) => obj is Query;
export declare const isRecord: (obj?: {
    __typename?: any;
} | null) => obj is Record;
export interface MutationPromiseChain {
    /** Creates IPNS record for the given project ID. */
    createRecord: (RecordPromiseChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Promise<FieldsSelection<Record, R>>;
    });
    deleteRecord: ((args: {
        id: Scalars['ID'];
    }) => RecordPromiseChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Promise<FieldsSelection<Record, R>>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishRecord: ((args: {
        /** The IPFS SHA-256 hash represented in base32. */
        hash: Scalars['String'];
        /** The managed record ID to publish. */
        id: Scalars['ID'];
    }) => RecordPromiseChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Promise<FieldsSelection<Record, R>>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedName: ((args: {
        /** The signed IPNS record represented as base64 string. */
        input: Scalars['String'];
        /** A string representation of a public key, which is the "name" that can be resolved to a record. */
        key: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
}
export interface MutationObservableChain {
    /** Creates IPNS record for the given project ID. */
    createRecord: (RecordObservableChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Observable<FieldsSelection<Record, R>>;
    });
    deleteRecord: ((args: {
        id: Scalars['ID'];
    }) => RecordObservableChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Observable<FieldsSelection<Record, R>>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishRecord: ((args: {
        /** The IPFS SHA-256 hash represented in base32. */
        hash: Scalars['String'];
        /** The managed record ID to publish. */
        id: Scalars['ID'];
    }) => RecordObservableChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Observable<FieldsSelection<Record, R>>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedName: ((args: {
        /** The signed IPNS record represented as base64 string. */
        input: Scalars['String'];
        /** A string representation of a public key, which is the "name" that can be resolved to a record. */
        key: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
}
export interface QueryPromiseChain {
    /** Get IPNS record for the current project. */
    record: ((args: {
        /** IPNS record name */
        name: Scalars['String'];
    }) => RecordPromiseChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Promise<FieldsSelection<Record, R>>;
    });
    records: ({
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>[]) => Promise<FieldsSelection<Record, R>[]>;
    });
    /** Resolves IPNS name to the IPFS hash. */
    resolveName: ((args: {
        /** The IPNS name to resolve. */
        name: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
}
export interface QueryObservableChain {
    /** Get IPNS record for the current project. */
    record: ((args: {
        /** IPNS record name */
        name: Scalars['String'];
    }) => RecordObservableChain & {
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>) => Observable<FieldsSelection<Record, R>>;
    });
    records: ({
        get: <R extends RecordRequest>(request: R, defaultValue?: FieldsSelection<Record, R>[]) => Observable<FieldsSelection<Record, R>[]>;
    });
    /** Resolves IPNS name to the IPFS hash. */
    resolveName: ((args: {
        /** The IPNS name to resolve. */
        name: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
}
export interface RecordPromiseChain {
    hash: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Promise<(Scalars['String'] | undefined)>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
}
export interface RecordObservableChain {
    hash: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Observable<(Scalars['String'] | undefined)>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
}
//# sourceMappingURL=schema.d.ts.map