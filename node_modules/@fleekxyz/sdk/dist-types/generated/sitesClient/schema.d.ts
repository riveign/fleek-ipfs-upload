import { FieldsSelection, Observable } from '@genql/runtime';
export type Scalars = {
    Date: string;
    String: string;
    ID: string;
    Boolean: boolean;
};
export interface Deployment {
    cid: Scalars['String'];
    createdAt: Scalars['Date'];
    id: Scalars['ID'];
    siteId: Scalars['ID'];
    status: DeploymentStatus;
    storageType: StorageType;
    updatedAt: Scalars['Date'];
    __typename: 'Deployment';
}
export type DeploymentStatus = 'AVAILABLE' | 'CREATED' | 'FAILED' | 'SUCCESS';
export interface Mutation {
    createCustomIpfsDeployment: Deployment;
    createSite: Site;
    deleteSite: Site;
    __typename: 'Mutation';
}
export interface Query {
    deployment: Deployment;
    deployments: Deployment[];
    site: Site;
    siteBySlug: Site;
    sites: Site[];
    __typename: 'Query';
}
export interface Site {
    deployments: Deployment[];
    id: Scalars['ID'];
    name: Scalars['String'];
    slug: Scalars['String'];
    zones: SiteZone[];
    __typename: 'Site';
}
export interface SiteZone {
    createdAt: Scalars['Date'];
    id: Scalars['ID'];
    updatedAt: Scalars['Date'];
    __typename: 'SiteZone';
}
export type StorageType = 'IPFS';
export interface DeploymentRequest {
    cid?: boolean | number;
    createdAt?: boolean | number;
    id?: boolean | number;
    siteId?: boolean | number;
    status?: boolean | number;
    storageType?: boolean | number;
    updatedAt?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface MutationRequest {
    createCustomIpfsDeployment?: [{
        cid: Scalars['String'];
        siteId: Scalars['ID'];
    }, DeploymentRequest];
    createSite?: [{
        name: Scalars['String'];
    }, SiteRequest];
    deleteSite?: [{
        id: Scalars['ID'];
    }, SiteRequest];
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface QueryRequest {
    deployment?: [{
        id: Scalars['ID'];
    }, DeploymentRequest];
    deployments?: DeploymentRequest;
    site?: [{
        id: Scalars['ID'];
    }, SiteRequest];
    siteBySlug?: [{
        slug: Scalars['String'];
    }, SiteRequest];
    sites?: SiteRequest;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface SiteRequest {
    deployments?: DeploymentRequest;
    id?: boolean | number;
    name?: boolean | number;
    slug?: boolean | number;
    zones?: SiteZoneRequest;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface SiteZoneRequest {
    createdAt?: boolean | number;
    id?: boolean | number;
    updatedAt?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export declare const isDeployment: (obj?: {
    __typename?: any;
} | null) => obj is Deployment;
export declare const isMutation: (obj?: {
    __typename?: any;
} | null) => obj is Mutation;
export declare const isQuery: (obj?: {
    __typename?: any;
} | null) => obj is Query;
export declare const isSite: (obj?: {
    __typename?: any;
} | null) => obj is Site;
export declare const isSiteZone: (obj?: {
    __typename?: any;
} | null) => obj is SiteZone;
export interface DeploymentPromiseChain {
    cid: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    siteId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    status: ({
        get: (request?: boolean | number, defaultValue?: DeploymentStatus) => Promise<DeploymentStatus>;
    });
    storageType: ({
        get: (request?: boolean | number, defaultValue?: StorageType) => Promise<StorageType>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
}
export interface DeploymentObservableChain {
    cid: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    siteId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    status: ({
        get: (request?: boolean | number, defaultValue?: DeploymentStatus) => Observable<DeploymentStatus>;
    });
    storageType: ({
        get: (request?: boolean | number, defaultValue?: StorageType) => Observable<StorageType>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
}
export interface MutationPromiseChain {
    createCustomIpfsDeployment: ((args: {
        cid: Scalars['String'];
        siteId: Scalars['ID'];
    }) => DeploymentPromiseChain & {
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>) => Promise<FieldsSelection<Deployment, R>>;
    });
    createSite: ((args: {
        name: Scalars['String'];
    }) => SitePromiseChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Promise<FieldsSelection<Site, R>>;
    });
    deleteSite: ((args: {
        id: Scalars['ID'];
    }) => SitePromiseChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Promise<FieldsSelection<Site, R>>;
    });
}
export interface MutationObservableChain {
    createCustomIpfsDeployment: ((args: {
        cid: Scalars['String'];
        siteId: Scalars['ID'];
    }) => DeploymentObservableChain & {
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>) => Observable<FieldsSelection<Deployment, R>>;
    });
    createSite: ((args: {
        name: Scalars['String'];
    }) => SiteObservableChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Observable<FieldsSelection<Site, R>>;
    });
    deleteSite: ((args: {
        id: Scalars['ID'];
    }) => SiteObservableChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Observable<FieldsSelection<Site, R>>;
    });
}
export interface QueryPromiseChain {
    deployment: ((args: {
        id: Scalars['ID'];
    }) => DeploymentPromiseChain & {
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>) => Promise<FieldsSelection<Deployment, R>>;
    });
    deployments: ({
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>[]) => Promise<FieldsSelection<Deployment, R>[]>;
    });
    site: ((args: {
        id: Scalars['ID'];
    }) => SitePromiseChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Promise<FieldsSelection<Site, R>>;
    });
    siteBySlug: ((args: {
        slug: Scalars['String'];
    }) => SitePromiseChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Promise<FieldsSelection<Site, R>>;
    });
    sites: ({
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>[]) => Promise<FieldsSelection<Site, R>[]>;
    });
}
export interface QueryObservableChain {
    deployment: ((args: {
        id: Scalars['ID'];
    }) => DeploymentObservableChain & {
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>) => Observable<FieldsSelection<Deployment, R>>;
    });
    deployments: ({
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>[]) => Observable<FieldsSelection<Deployment, R>[]>;
    });
    site: ((args: {
        id: Scalars['ID'];
    }) => SiteObservableChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Observable<FieldsSelection<Site, R>>;
    });
    siteBySlug: ((args: {
        slug: Scalars['String'];
    }) => SiteObservableChain & {
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>) => Observable<FieldsSelection<Site, R>>;
    });
    sites: ({
        get: <R extends SiteRequest>(request: R, defaultValue?: FieldsSelection<Site, R>[]) => Observable<FieldsSelection<Site, R>[]>;
    });
}
export interface SitePromiseChain {
    deployments: ({
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>[]) => Promise<FieldsSelection<Deployment, R>[]>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    slug: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    zones: ({
        get: <R extends SiteZoneRequest>(request: R, defaultValue?: FieldsSelection<SiteZone, R>[]) => Promise<FieldsSelection<SiteZone, R>[]>;
    });
}
export interface SiteObservableChain {
    deployments: ({
        get: <R extends DeploymentRequest>(request: R, defaultValue?: FieldsSelection<Deployment, R>[]) => Observable<FieldsSelection<Deployment, R>[]>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    slug: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    zones: ({
        get: <R extends SiteZoneRequest>(request: R, defaultValue?: FieldsSelection<SiteZone, R>[]) => Observable<FieldsSelection<SiteZone, R>[]>;
    });
}
export interface SiteZonePromiseChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
}
export interface SiteZoneObservableChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
}
//# sourceMappingURL=schema.d.ts.map