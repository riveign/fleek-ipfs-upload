import { FieldsSelection, Observable } from '@genql/runtime';
export type Scalars = {
    ID: string;
    String: string;
    Float: number;
    Date: any;
    Boolean: boolean;
};
export interface BillingPlan {
    id: Scalars['ID'];
    name: Scalars['String'];
    serviceFeePercentage: Scalars['Float'];
    __typename: 'BillingPlan';
}
export type BillingPlanStatus = 'ACTIVE' | 'DEPRECATED' | 'DRAFT';
export interface IpnsRecord {
    hash?: Scalars['String'];
    id: Scalars['ID'];
    name: Scalars['String'];
    __typename: 'IpnsRecord';
}
export interface Mutation {
    addUserToProject: Scalars['Boolean'];
    /** Creates IPNS record for the given project ID. */
    createIpnsRecord: IpnsRecord;
    createLoginVerificationSession: Scalars['Boolean'];
    createProject: Project;
    createPublicKeyChallenge: Scalars['String'];
    deleteIpnsRecord: IpnsRecord;
    deleteMembership: Scalars['Boolean'];
    deletePersonalAccessToken: Scalars['Boolean'];
    deleteProject: Project;
    linkPublicKey: PublicKey;
    loginWithPersonalAccessToken: Scalars['String'];
    loginWithWeb3Auth: Scalars['String'];
    loginWithWeb3AuthWallet: Scalars['String'];
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishIpnsRecord: IpnsRecord;
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedIpnsName: Scalars['String'];
    updateProject: Project;
    __typename: 'Mutation';
}
export interface PersonalAccessToken {
    createdAt: Scalars['Date'];
    id: Scalars['ID'];
    maskedToken: Scalars['String'];
    name?: Scalars['String'];
    __typename: 'PersonalAccessToken';
}
export interface Project {
    id: Scalars['ID'];
    name: Scalars['String'];
    __typename: 'Project';
}
export interface PublicKey {
    id: Scalars['ID'];
    publicKey: Scalars['String'];
    type?: Scalars['String'];
    user: User;
    __typename: 'PublicKey';
}
export interface Query {
    billingPlans: BillingPlan[];
    /** Get IPNS record for the current project. */
    ipnsRecord: IpnsRecord;
    ipnsRecords: IpnsRecord[];
    personalAccessTokenFromVerificationSession: Scalars['String'];
    personalAccessTokens: PersonalAccessToken[];
    project: Project;
    projects: Project[];
    /** Resolves IPNS name to the IPFS hash. */
    resolveIpnsName: Scalars['String'];
    user: User;
    __typename: 'Query';
}
export interface User {
    email: Scalars['String'];
    id: Scalars['ID'];
    /** Active project based on Access Token */
    project?: Project;
    publicKeys: PublicKey[];
    __typename: 'User';
}
export interface BillingPlanRequest {
    id?: boolean | number;
    name?: boolean | number;
    serviceFeePercentage?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface IpnsRecordRequest {
    hash?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface MutationRequest {
    addUserToProject?: [{
        email: Scalars['String'];
        projectId: Scalars['ID'];
    }];
    /** Creates IPNS record for the given project ID. */
    createIpnsRecord?: IpnsRecordRequest;
    createLoginVerificationSession?: [
        {
            /** Generated session id for authorization from CLI */
            id: Scalars['ID'];
        }
    ];
    createProject?: [{
        name: Scalars['String'];
    }, ProjectRequest];
    createPublicKeyChallenge?: boolean | number;
    deleteIpnsRecord?: [{
        id: Scalars['ID'];
    }, IpnsRecordRequest];
    deleteMembership?: [{
        projectId: Scalars['ID'];
        userId: Scalars['ID'];
    }];
    deletePersonalAccessToken?: [{
        id: Scalars['ID'];
    }];
    deleteProject?: [{
        id: Scalars['ID'];
    }, ProjectRequest];
    linkPublicKey?: [
        {
            /** SIWE Message stringified. */
            message: Scalars['String'];
            signature: Scalars['String'];
        },
        PublicKeyRequest
    ];
    loginWithPersonalAccessToken?: [{
        personalAccessToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }];
    loginWithWeb3Auth?: [{
        idToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }];
    loginWithWeb3AuthWallet?: [{
        idToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }];
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishIpnsRecord?: [
        {
            /** The IPFS SHA-256 hash represented in base32. */
            hash: Scalars['String'];
            /** The managed record ID to publish. */
            id: Scalars['ID'];
        },
        IpnsRecordRequest
    ];
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedIpnsName?: [
        {
            /** The signed IPNS record represented as base64 string. */
            input: Scalars['String'];
            /** A string representation of a public key, which is the "name" that can be resolved to a record. */
            key: Scalars['String'];
        }
    ];
    updateProject?: [{
        id: Scalars['ID'];
        name?: (Scalars['String'] | null);
    }, ProjectRequest];
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface PersonalAccessTokenRequest {
    createdAt?: boolean | number;
    id?: boolean | number;
    maskedToken?: boolean | number;
    name?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface ProjectRequest {
    id?: boolean | number;
    name?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface PublicKeyRequest {
    id?: boolean | number;
    publicKey?: boolean | number;
    type?: boolean | number;
    user?: UserRequest;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface QueryRequest {
    billingPlans?: BillingPlanRequest;
    /** Get IPNS record for the current project. */
    ipnsRecord?: [
        {
            /** IPNS record name */
            name: Scalars['String'];
        },
        IpnsRecordRequest
    ];
    ipnsRecords?: IpnsRecordRequest;
    personalAccessTokenFromVerificationSession?: [
        {
            /** Generated session ID for authorization from CLI */
            id: Scalars['ID'];
            /** Name of the personal access token */
            name?: (Scalars['String'] | null);
        }
    ];
    personalAccessTokens?: PersonalAccessTokenRequest;
    project?: [{
        id: Scalars['String'];
    }, ProjectRequest];
    projects?: ProjectRequest;
    /** Resolves IPNS name to the IPFS hash. */
    resolveIpnsName?: [
        {
            /** The IPNS name to resolve. */
            name: Scalars['String'];
        }
    ];
    user?: UserRequest;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface UserRequest {
    email?: boolean | number;
    id?: boolean | number;
    /** Active project based on Access Token */
    project?: ProjectRequest;
    publicKeys?: PublicKeyRequest;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export declare const isBillingPlan: (obj?: {
    __typename?: any;
} | null) => obj is BillingPlan;
export declare const isIpnsRecord: (obj?: {
    __typename?: any;
} | null) => obj is IpnsRecord;
export declare const isMutation: (obj?: {
    __typename?: any;
} | null) => obj is Mutation;
export declare const isPersonalAccessToken: (obj?: {
    __typename?: any;
} | null) => obj is PersonalAccessToken;
export declare const isProject: (obj?: {
    __typename?: any;
} | null) => obj is Project;
export declare const isPublicKey: (obj?: {
    __typename?: any;
} | null) => obj is PublicKey;
export declare const isQuery: (obj?: {
    __typename?: any;
} | null) => obj is Query;
export declare const isUser: (obj?: {
    __typename?: any;
} | null) => obj is User;
export interface BillingPlanPromiseChain {
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    serviceFeePercentage: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Float']) => Promise<Scalars['Float']>;
    });
}
export interface BillingPlanObservableChain {
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    serviceFeePercentage: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Float']) => Observable<Scalars['Float']>;
    });
}
export interface IpnsRecordPromiseChain {
    hash: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Promise<(Scalars['String'] | undefined)>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
}
export interface IpnsRecordObservableChain {
    hash: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Observable<(Scalars['String'] | undefined)>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
}
export interface MutationPromiseChain {
    addUserToProject: ((args: {
        email: Scalars['String'];
        projectId: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Promise<Scalars['Boolean']>;
    });
    /** Creates IPNS record for the given project ID. */
    createIpnsRecord: (IpnsRecordPromiseChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Promise<FieldsSelection<IpnsRecord, R>>;
    });
    createLoginVerificationSession: ((args: {
        /** Generated session id for authorization from CLI */
        id: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Promise<Scalars['Boolean']>;
    });
    createProject: ((args: {
        name: Scalars['String'];
    }) => ProjectPromiseChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Promise<FieldsSelection<Project, R>>;
    });
    createPublicKeyChallenge: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    deleteIpnsRecord: ((args: {
        id: Scalars['ID'];
    }) => IpnsRecordPromiseChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Promise<FieldsSelection<IpnsRecord, R>>;
    });
    deleteMembership: ((args: {
        projectId: Scalars['ID'];
        userId: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Promise<Scalars['Boolean']>;
    });
    deletePersonalAccessToken: ((args: {
        id: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Promise<Scalars['Boolean']>;
    });
    deleteProject: ((args: {
        id: Scalars['ID'];
    }) => ProjectPromiseChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Promise<FieldsSelection<Project, R>>;
    });
    linkPublicKey: ((args: {
        /** SIWE Message stringified. */
        message: Scalars['String'];
        signature: Scalars['String'];
    }) => PublicKeyPromiseChain & {
        get: <R extends PublicKeyRequest>(request: R, defaultValue?: FieldsSelection<PublicKey, R>) => Promise<FieldsSelection<PublicKey, R>>;
    });
    loginWithPersonalAccessToken: ((args: {
        personalAccessToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    loginWithWeb3Auth: ((args: {
        idToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    loginWithWeb3AuthWallet: ((args: {
        idToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishIpnsRecord: ((args: {
        /** The IPFS SHA-256 hash represented in base32. */
        hash: Scalars['String'];
        /** The managed record ID to publish. */
        id: Scalars['ID'];
    }) => IpnsRecordPromiseChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Promise<FieldsSelection<IpnsRecord, R>>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedIpnsName: ((args: {
        /** The signed IPNS record represented as base64 string. */
        input: Scalars['String'];
        /** A string representation of a public key, which is the "name" that can be resolved to a record. */
        key: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    updateProject: ((args: {
        id: Scalars['ID'];
        name?: (Scalars['String'] | null);
    }) => ProjectPromiseChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Promise<FieldsSelection<Project, R>>;
    });
}
export interface MutationObservableChain {
    addUserToProject: ((args: {
        email: Scalars['String'];
        projectId: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Observable<Scalars['Boolean']>;
    });
    /** Creates IPNS record for the given project ID. */
    createIpnsRecord: (IpnsRecordObservableChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Observable<FieldsSelection<IpnsRecord, R>>;
    });
    createLoginVerificationSession: ((args: {
        /** Generated session id for authorization from CLI */
        id: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Observable<Scalars['Boolean']>;
    });
    createProject: ((args: {
        name: Scalars['String'];
    }) => ProjectObservableChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Observable<FieldsSelection<Project, R>>;
    });
    createPublicKeyChallenge: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    deleteIpnsRecord: ((args: {
        id: Scalars['ID'];
    }) => IpnsRecordObservableChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Observable<FieldsSelection<IpnsRecord, R>>;
    });
    deleteMembership: ((args: {
        projectId: Scalars['ID'];
        userId: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Observable<Scalars['Boolean']>;
    });
    deletePersonalAccessToken: ((args: {
        id: Scalars['ID'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Observable<Scalars['Boolean']>;
    });
    deleteProject: ((args: {
        id: Scalars['ID'];
    }) => ProjectObservableChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Observable<FieldsSelection<Project, R>>;
    });
    linkPublicKey: ((args: {
        /** SIWE Message stringified. */
        message: Scalars['String'];
        signature: Scalars['String'];
    }) => PublicKeyObservableChain & {
        get: <R extends PublicKeyRequest>(request: R, defaultValue?: FieldsSelection<PublicKey, R>) => Observable<FieldsSelection<PublicKey, R>>;
    });
    loginWithPersonalAccessToken: ((args: {
        personalAccessToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    loginWithWeb3Auth: ((args: {
        idToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    loginWithWeb3AuthWallet: ((args: {
        idToken: Scalars['String'];
        projectId?: (Scalars['ID'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash and managed record ID. */
    publishIpnsRecord: ((args: {
        /** The IPFS SHA-256 hash represented in base32. */
        hash: Scalars['String'];
        /** The managed record ID to publish. */
        id: Scalars['ID'];
    }) => IpnsRecordObservableChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Observable<FieldsSelection<IpnsRecord, R>>;
    });
    /** Publishes autogenerated IPNS name for the given IPFS hash. */
    publishSignedIpnsName: ((args: {
        /** The signed IPNS record represented as base64 string. */
        input: Scalars['String'];
        /** A string representation of a public key, which is the "name" that can be resolved to a record. */
        key: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    updateProject: ((args: {
        id: Scalars['ID'];
        name?: (Scalars['String'] | null);
    }) => ProjectObservableChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Observable<FieldsSelection<Project, R>>;
    });
}
export interface PersonalAccessTokenPromiseChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    maskedToken: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Promise<(Scalars['String'] | undefined)>;
    });
}
export interface PersonalAccessTokenObservableChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    maskedToken: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Observable<(Scalars['String'] | undefined)>;
    });
}
export interface ProjectPromiseChain {
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
}
export interface ProjectObservableChain {
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
}
export interface PublicKeyPromiseChain {
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    publicKey: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    type: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Promise<(Scalars['String'] | undefined)>;
    });
    user: (UserPromiseChain & {
        get: <R extends UserRequest>(request: R, defaultValue?: FieldsSelection<User, R>) => Promise<FieldsSelection<User, R>>;
    });
}
export interface PublicKeyObservableChain {
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    publicKey: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    type: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Observable<(Scalars['String'] | undefined)>;
    });
    user: (UserObservableChain & {
        get: <R extends UserRequest>(request: R, defaultValue?: FieldsSelection<User, R>) => Observable<FieldsSelection<User, R>>;
    });
}
export interface QueryPromiseChain {
    billingPlans: ({
        get: <R extends BillingPlanRequest>(request: R, defaultValue?: FieldsSelection<BillingPlan, R>[]) => Promise<FieldsSelection<BillingPlan, R>[]>;
    });
    /** Get IPNS record for the current project. */
    ipnsRecord: ((args: {
        /** IPNS record name */
        name: Scalars['String'];
    }) => IpnsRecordPromiseChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Promise<FieldsSelection<IpnsRecord, R>>;
    });
    ipnsRecords: ({
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>[]) => Promise<FieldsSelection<IpnsRecord, R>[]>;
    });
    personalAccessTokenFromVerificationSession: ((args: {
        /** Generated session ID for authorization from CLI */
        id: Scalars['ID'];
        /** Name of the personal access token */
        name?: (Scalars['String'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    personalAccessTokens: ({
        get: <R extends PersonalAccessTokenRequest>(request: R, defaultValue?: FieldsSelection<PersonalAccessToken, R>[]) => Promise<FieldsSelection<PersonalAccessToken, R>[]>;
    });
    project: ((args: {
        id: Scalars['String'];
    }) => ProjectPromiseChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Promise<FieldsSelection<Project, R>>;
    });
    projects: ({
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>[]) => Promise<FieldsSelection<Project, R>[]>;
    });
    /** Resolves IPNS name to the IPFS hash. */
    resolveIpnsName: ((args: {
        /** The IPNS name to resolve. */
        name: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    user: (UserPromiseChain & {
        get: <R extends UserRequest>(request: R, defaultValue?: FieldsSelection<User, R>) => Promise<FieldsSelection<User, R>>;
    });
}
export interface QueryObservableChain {
    billingPlans: ({
        get: <R extends BillingPlanRequest>(request: R, defaultValue?: FieldsSelection<BillingPlan, R>[]) => Observable<FieldsSelection<BillingPlan, R>[]>;
    });
    /** Get IPNS record for the current project. */
    ipnsRecord: ((args: {
        /** IPNS record name */
        name: Scalars['String'];
    }) => IpnsRecordObservableChain & {
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>) => Observable<FieldsSelection<IpnsRecord, R>>;
    });
    ipnsRecords: ({
        get: <R extends IpnsRecordRequest>(request: R, defaultValue?: FieldsSelection<IpnsRecord, R>[]) => Observable<FieldsSelection<IpnsRecord, R>[]>;
    });
    personalAccessTokenFromVerificationSession: ((args: {
        /** Generated session ID for authorization from CLI */
        id: Scalars['ID'];
        /** Name of the personal access token */
        name?: (Scalars['String'] | null);
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    personalAccessTokens: ({
        get: <R extends PersonalAccessTokenRequest>(request: R, defaultValue?: FieldsSelection<PersonalAccessToken, R>[]) => Observable<FieldsSelection<PersonalAccessToken, R>[]>;
    });
    project: ((args: {
        id: Scalars['String'];
    }) => ProjectObservableChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>) => Observable<FieldsSelection<Project, R>>;
    });
    projects: ({
        get: <R extends ProjectRequest>(request: R, defaultValue?: FieldsSelection<Project, R>[]) => Observable<FieldsSelection<Project, R>[]>;
    });
    /** Resolves IPNS name to the IPFS hash. */
    resolveIpnsName: ((args: {
        /** The IPNS name to resolve. */
        name: Scalars['String'];
    }) => {
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    user: (UserObservableChain & {
        get: <R extends UserRequest>(request: R, defaultValue?: FieldsSelection<User, R>) => Observable<FieldsSelection<User, R>>;
    });
}
export interface UserPromiseChain {
    email: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    /** Active project based on Access Token */
    project: (ProjectPromiseChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: (FieldsSelection<Project, R> | undefined)) => Promise<(FieldsSelection<Project, R> | undefined)>;
    });
    publicKeys: ({
        get: <R extends PublicKeyRequest>(request: R, defaultValue?: FieldsSelection<PublicKey, R>[]) => Promise<FieldsSelection<PublicKey, R>[]>;
    });
}
export interface UserObservableChain {
    email: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    /** Active project based on Access Token */
    project: (ProjectObservableChain & {
        get: <R extends ProjectRequest>(request: R, defaultValue?: (FieldsSelection<Project, R> | undefined)) => Observable<(FieldsSelection<Project, R> | undefined)>;
    });
    publicKeys: ({
        get: <R extends PublicKeyRequest>(request: R, defaultValue?: FieldsSelection<PublicKey, R>[]) => Observable<FieldsSelection<PublicKey, R>[]>;
    });
}
//# sourceMappingURL=schema.d.ts.map