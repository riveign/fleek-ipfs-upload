import { FieldsSelection, Observable } from '@genql/runtime';
export type Scalars = {
    Date: string;
    ID: string;
    String: string;
    Boolean: boolean;
};
export interface DnsConfig {
    createdAt: Scalars['Date'];
    id: Scalars['ID'];
    name: Scalars['String'];
    type: DnsConfigType;
    updatedAt: Scalars['Date'];
    value: Scalars['String'];
    __typename: 'DnsConfig';
}
export type DnsConfigType = 'A' | 'CNAME';
export interface Domain {
    createdAt: Scalars['Date'];
    dnsConfigs: DnsConfig[];
    hostname: Scalars['String'];
    id: Scalars['ID'];
    isVerified: Scalars['Boolean'];
    projectId: Scalars['String'];
    status: DomainStatus;
    updatedAt: Scalars['Date'];
    zoneId: Scalars['ID'];
    __typename: 'Domain';
}
export type DomainStatus = 'ACTIVE' | 'CREATED' | 'CREATING' | 'CREATING_FAILED' | 'DELETING' | 'DELETING_FAILED' | 'VERIFYING' | 'VERIFYING_FAILED';
export interface Mutation {
    /** Create a domain for the project. */
    createDomain: Domain;
    /** Creates a new zone where domains can be assigned. */
    createZoneForSite: Zone;
    deleteDomain: Domain;
    verifyDomain: Domain;
    __typename: 'Mutation';
}
export interface Query {
    domain: Domain;
    domainByHostname: Domain;
    domains: Domain[];
    domainsByZoneId: Domain[];
    zone: Zone;
    zones: Zone[];
    __typename: 'Query';
}
export interface Zone {
    createdAt: Scalars['Date'];
    id: Scalars['ID'];
    originUrl?: Scalars['String'];
    originUrlChangedAt?: Scalars['Date'];
    originUrlChangedBy?: Scalars['String'];
    projectId: Scalars['String'];
    updatedAt: Scalars['Date'];
    __typename: 'Zone';
}
export interface DnsConfigRequest {
    createdAt?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    type?: boolean | number;
    updatedAt?: boolean | number;
    value?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface DomainRequest {
    createdAt?: boolean | number;
    dnsConfigs?: DnsConfigRequest;
    hostname?: boolean | number;
    id?: boolean | number;
    isVerified?: boolean | number;
    projectId?: boolean | number;
    status?: boolean | number;
    updatedAt?: boolean | number;
    zoneId?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface MutationRequest {
    /** Create a domain for the project. */
    createDomain?: [
        {
            /** Hostname of the domain to create. */
            hostname: Scalars['String'];
            /** ID of a zone to create domain for. */
            zoneId: Scalars['ID'];
        },
        DomainRequest
    ];
    /** Creates a new zone where domains can be assigned. */
    createZoneForSite?: [
        {
            /** ID of a site to add domain to. */
            siteId: Scalars['ID'];
        },
        ZoneRequest
    ];
    deleteDomain?: [{
        domainId: Scalars['ID'];
    }, DomainRequest];
    verifyDomain?: [{
        domainId: Scalars['ID'];
    }, DomainRequest];
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface QueryRequest {
    domain?: [{
        domainId: Scalars['ID'];
    }, DomainRequest];
    domainByHostname?: [{
        hostname: Scalars['String'];
    }, DomainRequest];
    domains?: DomainRequest;
    domainsByZoneId?: [{
        zoneId: Scalars['ID'];
    }, DomainRequest];
    zone?: [{
        id: Scalars['ID'];
    }, ZoneRequest];
    zones?: ZoneRequest;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface ZoneRequest {
    createdAt?: boolean | number;
    id?: boolean | number;
    originUrl?: boolean | number;
    originUrlChangedAt?: boolean | number;
    originUrlChangedBy?: boolean | number;
    projectId?: boolean | number;
    updatedAt?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export declare const isDnsConfig: (obj?: {
    __typename?: any;
} | null) => obj is DnsConfig;
export declare const isDomain: (obj?: {
    __typename?: any;
} | null) => obj is Domain;
export declare const isMutation: (obj?: {
    __typename?: any;
} | null) => obj is Mutation;
export declare const isQuery: (obj?: {
    __typename?: any;
} | null) => obj is Query;
export declare const isZone: (obj?: {
    __typename?: any;
} | null) => obj is Zone;
export interface DnsConfigPromiseChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    type: ({
        get: (request?: boolean | number, defaultValue?: DnsConfigType) => Promise<DnsConfigType>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    value: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
}
export interface DnsConfigObservableChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    name: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    type: ({
        get: (request?: boolean | number, defaultValue?: DnsConfigType) => Observable<DnsConfigType>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    value: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
}
export interface DomainPromiseChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    dnsConfigs: ({
        get: <R extends DnsConfigRequest>(request: R, defaultValue?: FieldsSelection<DnsConfig, R>[]) => Promise<FieldsSelection<DnsConfig, R>[]>;
    });
    hostname: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    isVerified: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Promise<Scalars['Boolean']>;
    });
    projectId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    status: ({
        get: (request?: boolean | number, defaultValue?: DomainStatus) => Promise<DomainStatus>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    zoneId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
}
export interface DomainObservableChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    dnsConfigs: ({
        get: <R extends DnsConfigRequest>(request: R, defaultValue?: FieldsSelection<DnsConfig, R>[]) => Observable<FieldsSelection<DnsConfig, R>[]>;
    });
    hostname: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    isVerified: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Boolean']) => Observable<Scalars['Boolean']>;
    });
    projectId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    status: ({
        get: (request?: boolean | number, defaultValue?: DomainStatus) => Observable<DomainStatus>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    zoneId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
}
export interface MutationPromiseChain {
    /** Create a domain for the project. */
    createDomain: ((args: {
        /** Hostname of the domain to create. */
        hostname: Scalars['String'];
        /** ID of a zone to create domain for. */
        zoneId: Scalars['ID'];
    }) => DomainPromiseChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Promise<FieldsSelection<Domain, R>>;
    });
    /** Creates a new zone where domains can be assigned. */
    createZoneForSite: ((args: {
        /** ID of a site to add domain to. */
        siteId: Scalars['ID'];
    }) => ZonePromiseChain & {
        get: <R extends ZoneRequest>(request: R, defaultValue?: FieldsSelection<Zone, R>) => Promise<FieldsSelection<Zone, R>>;
    });
    deleteDomain: ((args: {
        domainId: Scalars['ID'];
    }) => DomainPromiseChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Promise<FieldsSelection<Domain, R>>;
    });
    verifyDomain: ((args: {
        domainId: Scalars['ID'];
    }) => DomainPromiseChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Promise<FieldsSelection<Domain, R>>;
    });
}
export interface MutationObservableChain {
    /** Create a domain for the project. */
    createDomain: ((args: {
        /** Hostname of the domain to create. */
        hostname: Scalars['String'];
        /** ID of a zone to create domain for. */
        zoneId: Scalars['ID'];
    }) => DomainObservableChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Observable<FieldsSelection<Domain, R>>;
    });
    /** Creates a new zone where domains can be assigned. */
    createZoneForSite: ((args: {
        /** ID of a site to add domain to. */
        siteId: Scalars['ID'];
    }) => ZoneObservableChain & {
        get: <R extends ZoneRequest>(request: R, defaultValue?: FieldsSelection<Zone, R>) => Observable<FieldsSelection<Zone, R>>;
    });
    deleteDomain: ((args: {
        domainId: Scalars['ID'];
    }) => DomainObservableChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Observable<FieldsSelection<Domain, R>>;
    });
    verifyDomain: ((args: {
        domainId: Scalars['ID'];
    }) => DomainObservableChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Observable<FieldsSelection<Domain, R>>;
    });
}
export interface QueryPromiseChain {
    domain: ((args: {
        domainId: Scalars['ID'];
    }) => DomainPromiseChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Promise<FieldsSelection<Domain, R>>;
    });
    domainByHostname: ((args: {
        hostname: Scalars['String'];
    }) => DomainPromiseChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Promise<FieldsSelection<Domain, R>>;
    });
    domains: ({
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>[]) => Promise<FieldsSelection<Domain, R>[]>;
    });
    domainsByZoneId: ((args: {
        zoneId: Scalars['ID'];
    }) => {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>[]) => Promise<FieldsSelection<Domain, R>[]>;
    });
    zone: ((args: {
        id: Scalars['ID'];
    }) => ZonePromiseChain & {
        get: <R extends ZoneRequest>(request: R, defaultValue?: FieldsSelection<Zone, R>) => Promise<FieldsSelection<Zone, R>>;
    });
    zones: ({
        get: <R extends ZoneRequest>(request: R, defaultValue?: FieldsSelection<Zone, R>[]) => Promise<FieldsSelection<Zone, R>[]>;
    });
}
export interface QueryObservableChain {
    domain: ((args: {
        domainId: Scalars['ID'];
    }) => DomainObservableChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Observable<FieldsSelection<Domain, R>>;
    });
    domainByHostname: ((args: {
        hostname: Scalars['String'];
    }) => DomainObservableChain & {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>) => Observable<FieldsSelection<Domain, R>>;
    });
    domains: ({
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>[]) => Observable<FieldsSelection<Domain, R>[]>;
    });
    domainsByZoneId: ((args: {
        zoneId: Scalars['ID'];
    }) => {
        get: <R extends DomainRequest>(request: R, defaultValue?: FieldsSelection<Domain, R>[]) => Observable<FieldsSelection<Domain, R>[]>;
    });
    zone: ((args: {
        id: Scalars['ID'];
    }) => ZoneObservableChain & {
        get: <R extends ZoneRequest>(request: R, defaultValue?: FieldsSelection<Zone, R>) => Observable<FieldsSelection<Zone, R>>;
    });
    zones: ({
        get: <R extends ZoneRequest>(request: R, defaultValue?: FieldsSelection<Zone, R>[]) => Observable<FieldsSelection<Zone, R>[]>;
    });
}
export interface ZonePromiseChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Promise<Scalars['ID']>;
    });
    originUrl: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Promise<(Scalars['String'] | undefined)>;
    });
    originUrlChangedAt: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['Date'] | undefined)) => Promise<(Scalars['Date'] | undefined)>;
    });
    originUrlChangedBy: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Promise<(Scalars['String'] | undefined)>;
    });
    projectId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Promise<Scalars['String']>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Promise<Scalars['Date']>;
    });
}
export interface ZoneObservableChain {
    createdAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
    id: ({
        get: (request?: boolean | number, defaultValue?: Scalars['ID']) => Observable<Scalars['ID']>;
    });
    originUrl: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Observable<(Scalars['String'] | undefined)>;
    });
    originUrlChangedAt: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['Date'] | undefined)) => Observable<(Scalars['Date'] | undefined)>;
    });
    originUrlChangedBy: ({
        get: (request?: boolean | number, defaultValue?: (Scalars['String'] | undefined)) => Observable<(Scalars['String'] | undefined)>;
    });
    projectId: ({
        get: (request?: boolean | number, defaultValue?: Scalars['String']) => Observable<Scalars['String']>;
    });
    updatedAt: ({
        get: (request?: boolean | number, defaultValue?: Scalars['Date']) => Observable<Scalars['Date']>;
    });
}
//# sourceMappingURL=schema.d.ts.map