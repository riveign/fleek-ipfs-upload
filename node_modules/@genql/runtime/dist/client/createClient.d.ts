import { ClientOptions as SubscriptionOptions, SubscriptionClient as WsSubscriptionClient } from 'subscriptions-transport-ws';
import { BatchOptions } from '../fetcher';
import { ExecutionResult, LinkedType } from '../types';
import { GraphqlOperation } from './generateGraphqlOperation';
export declare type Headers = HeadersInit | (() => HeadersInit) | (() => Promise<HeadersInit>);
export declare type BaseFetcher = (operation: GraphqlOperation | GraphqlOperation[]) => Promise<ExecutionResult>;
export declare type ClientOptions = Omit<RequestInit, 'body' | 'headers'> & {
    url?: string;
    batch?: BatchOptions | boolean;
    fetcher?: BaseFetcher;
    headers?: Headers;
    subscription?: {
        url?: string;
        headers?: Headers;
    } & SubscriptionOptions;
};
export declare const createClient: ({ queryRoot, mutationRoot, subscriptionRoot, ...options }: Pick<RequestInit, "cache" | "credentials" | "integrity" | "keepalive" | "method" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> & {
    url?: string;
    batch?: BatchOptions | boolean;
    fetcher?: BaseFetcher;
    headers?: Headers;
    subscription?: {
        url?: string;
        headers?: Headers;
    } & SubscriptionOptions;
} & {
    queryRoot?: LinkedType;
    mutationRoot?: LinkedType;
    subscriptionRoot?: LinkedType;
}) => {
    wsClient?: WsSubscriptionClient;
    query?: Function;
    mutation?: Function;
    subscription?: Function;
    chain?: {
        query?: Function;
        mutation?: Function;
        subscription?: Function;
    };
};
//# sourceMappingURL=createClient.d.ts.map