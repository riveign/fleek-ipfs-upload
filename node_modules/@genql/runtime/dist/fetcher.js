"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFetcher = void 0;
var tslib_1 = require("tslib");
var graphql_query_batcher_1 = tslib_1.__importDefault(require("graphql-query-batcher"));
var isomorphic_unfetch_1 = tslib_1.__importDefault(require("isomorphic-unfetch"));
var error_1 = require("./error");
var DEFAULT_BATCH_OPTIONS = {
    maxBatchSize: 10,
    batchInterval: 40,
};
var createFetcher = function (_a) {
    var url = _a.url, _b = _a.headers, headers = _b === void 0 ? {} : _b, fetcher = _a.fetcher, _c = _a.batch, batch = _c === void 0 ? false : _c, rest = tslib_1.__rest(_a, ["url", "headers", "fetcher", "batch"]);
    if (!url && !fetcher) {
        throw new Error('url or fetcher is required');
    }
    if (!fetcher) {
        fetcher = function (body) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var headersObject, _a, res, _b, _c, json;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!(typeof headers == 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, headers()];
                    case 1:
                        _a = _d.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = headers;
                        _d.label = 3;
                    case 3:
                        headersObject = _a;
                        headersObject = headersObject || {};
                        return [4 /*yield*/, isomorphic_unfetch_1.default(url, tslib_1.__assign({ headers: tslib_1.__assign({ 'Content-Type': 'application/json' }, headersObject), method: 'POST', body: JSON.stringify(body) }, rest))];
                    case 4:
                        res = _d.sent();
                        if (!!res.ok) return [3 /*break*/, 6];
                        _b = Error.bind;
                        _c = res.statusText + ": ";
                        return [4 /*yield*/, res.text()];
                    case 5: throw new (_b.apply(Error, [void 0, _c + (_d.sent())]))();
                    case 6: return [4 /*yield*/, res.json()];
                    case 7:
                        json = _d.sent();
                        return [2 /*return*/, json];
                }
            });
        }); };
    }
    if (!batch) {
        return function (body) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var json;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, fetcher(body)];
                    case 1:
                        json = _b.sent();
                        if ((_a = json === null || json === void 0 ? void 0 : json.errors) === null || _a === void 0 ? void 0 : _a.length) {
                            throw new error_1.ClientError(json.errors);
                        }
                        if (json === null || json === void 0 ? void 0 : json.data) {
                            return [2 /*return*/, json.data];
                        }
                        throw new Error('fetcher returned unexpected result ' + JSON.stringify(json));
                }
            });
        }); };
    }
    var batcher = new graphql_query_batcher_1.default(function (batchedQuery) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var json;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetcher(batchedQuery)];
                case 1:
                    json = _a.sent();
                    return [2 /*return*/, json];
            }
        });
    }); }, batch === true ? DEFAULT_BATCH_OPTIONS : batch);
    return function (_a) {
        var query = _a.query, variables = _a.variables;
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var json;
            var _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, batcher.fetch(query, variables)];
                    case 1:
                        json = _c.sent();
                        if ((_b = json === null || json === void 0 ? void 0 : json.errors) === null || _b === void 0 ? void 0 : _b.length) {
                            throw new error_1.ClientError(json.errors);
                        }
                        if (json === null || json === void 0 ? void 0 : json.data) {
                            return [2 /*return*/, json.data];
                        }
                        throw new Error('fetcher returned unexpected result ' + JSON.stringify(json));
                }
            });
        });
    };
};
exports.createFetcher = createFetcher;
//# sourceMappingURL=fetcher.js.map